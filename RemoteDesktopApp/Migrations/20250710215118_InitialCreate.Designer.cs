// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RemoteDesktopApp.Data;

#nullable disable

namespace RemoteDesktopApp.Migrations
{
    [DbContext(typeof(RemoteDesktopDbContext))]
    [Migration("20250710215118_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RemoteDesktopApp.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AttachmentPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("AttachmentSize")
                        .HasColumnType("bigint");

                    b.Property<int?>("ConnectionId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId", "ReceiverId", "SentAt");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("RemoteDesktopApp.Models.ConnectionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RequesterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TargetUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TargetUserId");

                    b.HasIndex("RequesterId", "TargetUserId", "Status");

                    b.ToTable("ConnectionRequests");
                });

            modelBuilder.Entity("RemoteDesktopApp.Models.FileTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("BytesTransferred")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ConnectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileHash")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("TransferSpeed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId", "ReceiverId", "Status");

                    b.ToTable("FileTransfers");
                });

            modelBuilder.Entity("RemoteDesktopApp.Models.RemoteConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("BytesTransferred")
                        .HasColumnType("bigint");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ControlledUserId")
                        .HasColumnType("int");

                    b.Property<string>("ControllerIpAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ControllerUserId")
                        .HasColumnType("int");

                    b.Property<string>("DisconnectReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FrameRate")
                        .HasColumnType("int");

                    b.Property<int>("FramesSent")
                        .HasColumnType("int");

                    b.Property<bool>("HasControl")
                        .HasColumnType("bit");

                    b.Property<int>("InputEventsSent")
                        .HasColumnType("int");

                    b.Property<bool>("IsRecording")
                        .HasColumnType("bit");

                    b.Property<int>("ScreenQuality")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("ControlledUserId");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.HasIndex("ControllerUserId", "ControlledUserId", "Status");

                    b.ToTable("RemoteConnections");
                });

            modelBuilder.Entity("RemoteDesktopApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastSeenAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RemoteDesktopApp.Models.ChatMessage", b =>
                {
                    b.HasOne("RemoteDesktopApp.Models.RemoteConnection", "Connection")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RemoteDesktopApp.Models.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RemoteDesktopApp.Models.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Connection");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("RemoteDesktopApp.Models.ConnectionRequest", b =>
                {
                    b.HasOne("RemoteDesktopApp.Models.User", "Requester")
                        .WithMany("SentRequests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RemoteDesktopApp.Models.User", "TargetUser")
                        .WithMany("ReceivedRequests")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Requester");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("RemoteDesktopApp.Models.FileTransfer", b =>
                {
                    b.HasOne("RemoteDesktopApp.Models.RemoteConnection", "Connection")
                        .WithMany("FileTransfers")
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RemoteDesktopApp.Models.User", "Receiver")
                        .WithMany("ReceivedFiles")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RemoteDesktopApp.Models.User", "Sender")
                        .WithMany("SentFiles")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Connection");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("RemoteDesktopApp.Models.RemoteConnection", b =>
                {
                    b.HasOne("RemoteDesktopApp.Models.User", "ControlledUser")
                        .WithMany("IncomingConnections")
                        .HasForeignKey("ControlledUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RemoteDesktopApp.Models.User", "ControllerUser")
                        .WithMany("OutgoingConnections")
                        .HasForeignKey("ControllerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ControlledUser");

                    b.Navigation("ControllerUser");
                });

            modelBuilder.Entity("RemoteDesktopApp.Models.RemoteConnection", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("FileTransfers");
                });

            modelBuilder.Entity("RemoteDesktopApp.Models.User", b =>
                {
                    b.Navigation("IncomingConnections");

                    b.Navigation("OutgoingConnections");

                    b.Navigation("ReceivedFiles");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("ReceivedRequests");

                    b.Navigation("SentFiles");

                    b.Navigation("SentMessages");

                    b.Navigation("SentRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
